<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.study.mapper.UserMapper">
    <!--
        resultMap:将数据库查出来的字段和实体类里的字段进行手动映射
        -->
    <resultMap id="BaseResultMap" type="User">
        <!--
            column:对应的是数据库里的字段
            property:对应的是类里的字段
        -->
        <id column="id" property="id"></id>
    </resultMap>
    
    <sql id="six_column">
        id, name, age, sex, address, birth
    </sql>

    <sql id="five_column">
        name, age, sex, address, birth
    </sql>

    <!--
        动态SQL是指根据不同的参数，产生不同的SQL语句。这样的SQL就是动态SQL。
        Mybatis提供了一下标签，用于动态SQL的生成:
        1.	if
        2.	foreach
        3.	choose
        4.	where
        5.	set
        6.	trim
    -->

    <!--
        在if标签中，test属性是必须有，test属性值是一个表达式，如果表达式值为true,则if标签包裹的内容会拼接在当前sql上。
        and 并且
        or 或者 
        == 等于
        != 不等于
    -->

    <!--
        tips:  在select语句中，是不能使用keyProperty和keyColumn的
    -->
    <select id="selectOneUserByFuzzy" resultType="User">
        select <include refid="five_column">
        </include>
        from user where 1 = 1
        <!-- if标签，可以不用写sql里的if判断语法了，直接使用mybatis里的 -->
        <if test="name != null and name != '' ">
            and name like concat('%',#{name},'%')
        </if>
        <if test="address != null and address != ''">
            and address like concat('%',#{address},'%')
        </if>
    </select>

    <!--
        使用where标签可以解决拼sql时必须要加一个1=1的问题，并且还可以解决拼sql时候前面的and问题
    -->
    <select id="selectOneUserByFuzzy2" resultType="User">
        select <include refid="five_column">
    </include>
        from user
        <where>
            <if test="name != null and name != '' ">
                and name like concat('%',#{name},'%')
            </if>
            <if test="address != null and address != ''">
                and address like concat('%',#{address},'%')
            </if>
        </where>
    </select>

    <!--
        一般情况下的更新,而且没有使用set标签的情况下，后面的where是会报错的
    -->
    <update id="updateUserByUser" parameterType="User">
        update user
            <if test="user.name != null and user.name != ''">
                set name = #{user.name},
            </if>

        <if test="user.address != null and user.address != ''">
            address = #{user.address}
        </if>
        where id = 10
    </update>

    <!--
        使用set标签来更新,可以帮我们去掉最后一个 ,(逗号)
        注意：update table 后面要紧跟 set标签，嵌套在if里是不行的
        解决了每次set之后最后一个逗号的问题
    -->
    <update id="updateUserByUser2" parameterType="User">
        update user
        <set>
            <if test="user.name != null and user.name != ''">
                name = #{user.name},
            </if>
            <if test="user.address != null and user.address != ''">
                address = #{user.address},
            </if>
        </set>
        where id = 10
    </update>

    <!-- 这里的list不需要导包，我并没有去扫描它 -->
    <insert id="insertMutipleUsers" parameterType="User" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        insert into user(name, age, sex, address, birth) VALUES
        <!-- 在每个对象之间加上一个逗号来分割，不是对象里的属性的逗号
             这里foreach应该是foreach里面的value值，如果是这种写法就应该把insert放到外面
             对应的参数讲解:
                1.	collection 待循环的容器
                2.	item 指代 每次循环容器中的元素
                3.	open 开始循环时拼接字符串
                4.	close 循环结束拼接字符串
                5.	separator 每次循环之间拼接的字符串
                6.	index 循环索引
            解决了每次循环的最后一个逗号的问题
         -->
        <foreach collection="users" item="user" separator=",">
            (#{user.name},
            #{user.age},
            #{user.sex},
            #{user.address},
            #{user.birth})
        </foreach>
    </insert>

    <!-- 批量删除用户，解决了删除添加是循环的最后一个逗号问题 -->
    <delete id="deleteMutipleUsers" parameterType="int">
        delete from user where id in (
        <foreach collection="ids" item="id" separator=",">
            #{id}
        </foreach>
        )
    </delete>
</mapper>